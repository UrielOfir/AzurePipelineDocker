name: Docker pipelin

trigger:
- master
- feature/*

pool: default

variables: 
- group: "env file"

stages:

# Continuous Integration Process
- stage: CI
  jobs:
  - job: BuildAndPushDocker
    workspace: 
      clean: all
    steps:
    - powershell: |
       if ( docker images urielofir/weight-tracker -q )
        {
         docker rmi $(docker images urielofir/weight-tracker -q)
        }
      displayName: remove previous docker images

    - task: Docker@2
      displayName: Build an image
      inputs:
        command: build
        Dockerfile: Dockerfile
        repository: urielofir/weight-tracker
    
    - task: Docker@2
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: Push the image to a repository
      inputs:
        command: push
        repository: urielofir/weight-tracker
        tag: latest

# Continuous Deployment Process for Staging Environment
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment:
      name: staging.stg-ansibleVM
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              rm -rf dockerAnsible
              git clone https://github.com/UrielOfir/dockerAnsible.git
            displayName: clone ansible repo
          
          - bash: |
              echo "
              # Host configuration
              PORT=8080
              HOST=0.0.0.0
              # Postgres configuration
              PGHOST=$(stg_pghost)
              PGUSERNAME=$(pg_username)
              PGDATABASE=postgres
              PGPASSWORD=$(pg_password)
              PGPORT=5432
              HOST_URL=http://$(stg_LB_ip):8080
              COOKIE_ENCRYPT_PWD=superAwesomePasswordStringThatIsAtLeast32CharactersLong!
              NODE_ENV=development
              # Okta configuration
              OKTA_ORG_URL=$(okta_url)
              OKTA_CLIENT_ID=$(okta_client_id)
              OKTA_CLIENT_SECRET=$(okta_client_secret)
              " > .env
            displayName: add .env file



# # Continuous Delivery Process for Production Environment
# - stage: DeployToProduction
  # condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  # jobs:
  # - deployment: production
  #   displayName: Deploy to Production
  #   environment:
  #     name: <<YOUR ENVIRONMENT NAME>>
  #     resourceType: VirtualMachine
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - <<YOUR TASKS>>