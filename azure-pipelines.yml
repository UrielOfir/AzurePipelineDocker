name: Docker pipelin

trigger:
- master
- feature/*

pool: default

variables: 
- group: docker_vars

stages:

# Continuous Integration Process
- stage: CI
  jobs:
  - job: BuildAndPushDocker
    workspace: 
      clean: all
    steps:
    - powershell: |
       if ( docker images $(registry_url)/weight-tracker -q )
        {
         docker rmi $(docker images  $(registry_url)/weight-tracker -q)
        }
      displayName: remove previous docker images

    - script: docker build -t $(registry_url)/weight-tracker:latest .
      displayName: Build an image

    - script: docker login -u $(registry_username) -p $(registry_password) $(registry_url)
      displayName: connect to azure container registry
    
    - script: docker push urielofir.azurecr.io/weight-tracker:latest
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: Push the image to ther docker hub repository

# Continuous Deployment Process for Staging Environment
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment:
      name: staging.stg-ansibleVM
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              if ! command -v ansible
              then  
                sudo apt update;
                sudo apt install software-properties-common --yes;
                sudo add-apt-repository --yes --update ppa:ansible/ansible;
                sudo apt install ansible --yes;
              fi
            displayName: install ansible if needed

          - script: |
              rm -rf dockerAnsible
              git clone https://github.com/UrielOfir/dockerAnsible.git
            displayName: clone ansible repo
          
          - script: cd $(Build.SourcesDirectory)/dockerAnsible ; echo 10.0.1.4 host=\"10.0.1.4\" > inventory
            displayName: add inventory
          
          - script: |
             cd $(Build.SourcesDirectory)/dockerAnsible ;
              echo "
              ansible_connection: \"ssh\"
              ansible_port: \"22\"
              ansible_user: \"$(ansible_user)\" 
              ansible_ssh_pass: \"$(ansible_ssh_pass)\"
              pghost: \"\"
              pg_username: \"$(pg_username)\"
              pg_password: \"$(pg_password)\"
              LB_ip: \"$(LB_ip)\"
              okta_url: \"$(okta_url)\"
              okta_client_id: \"$(okta_client_id)\"
              okta_client_secret: \"$(okta_client_secret)\"
              registry_username: \"$(registry_username)\"
              registry_password: \"$(registry_password)\" 
              registry_url: \"$(registry_url)\"
              "> vars
            displayName: add vars file

          - script: |
              export ANSIBLE_HOST_KEY_CHECKING=False;
              cd $(Build.SourcesDirectory)/dockerAnsible; ansible-playbook -vvv -i inventory weightTrackerPlayBook.yaml
            displayName: run ansible

          - script: |
              echo "
              # Host configuration
              PORT=8080
              HOST=0.0.0.0
              # Postgres configuration
              PGHOST=$(stg_pghost)
              PGUSERNAME=$(pg_username)
              PGDATABASE=postgres
              PGPASSWORD=$(pg_password)
              PGPORT=5432
              HOST_URL=http://$(stg_LB_ip):8080
              COOKIE_ENCRYPT_PWD=superAwesomePasswordStringThatIsAtLeast32CharactersLong!
              NODE_ENV=development
              # Okta configuration
              OKTA_ORG_URL=$(okta_url)
              OKTA_CLIENT_ID=$(okta_client_id)
              OKTA_CLIENT_SECRET=$(okta_client_secret)
              " > .env
            displayName: add .env file



# # Continuous Delivery Process for Production Environment
# - stage: DeployToProduction
  # condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  # jobs:
  # - deployment: production
  #   displayName: Deploy to Production
  #   environment:
  #     name: <<YOUR ENVIRONMENT NAME>>
  #     resourceType: VirtualMachine
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - <<YOUR TASKS>>